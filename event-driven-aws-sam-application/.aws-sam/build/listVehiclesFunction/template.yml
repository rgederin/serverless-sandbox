AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Event driven serverless application using AWS SAM

Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref VehicleSAMTable

Resources:
  listVehiclesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/api/list-vehicles.handler
      Description: List vehicles from dynamo db table lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VehicleSAMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  addVehicleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/api/add-vehicle.handler
      Description: Add vehicle to dynamo db table lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VehicleSAMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
  #   getByIdFunction:
  #     Type: AWS::Serverless::Function
  #     Properties:
  #       Handler: src/handlers/get-by-id.getByIdHandler
  #       Runtime: nodejs12.x
  #       MemorySize: 128
  #       Timeout: 100
  #       Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
  #       Policies:
  #         - DynamoDBCrudPolicy:
  #             TableName: !Ref SampleTable
  #       Environment:
  #         Variables:
  #           SAMPLE_TABLE: !Ref SampleTable
  #       Events:
  #         Api:
  #           Type: Api
  #           Properties:
  #             Path: /{id}

  #   putItemFunction:
  #     Type: AWS::Serverless::Function
  #     Properties:
  #       Handler: src/handlers/put-item.putItemHandler
  #       Runtime: nodejs12.x
  #       MemorySize: 128
  #       Timeout: 100
  #       Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
  #       Policies:
  #         - DynamoDBCrudPolicy:
  #             TableName: !Ref SampleTable
  #       Environment:
  #         Variables:
  #           SAMPLE_TABLE: !Ref SampleTable
  #       Events:
  #         Api:
  #           Type: Api
  #           Properties:
  #             Path: /
  #             Method: POST

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  VehicleSAMTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
