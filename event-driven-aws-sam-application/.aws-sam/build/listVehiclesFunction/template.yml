AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Event driven serverless application using AWS SAM

Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref VehicleSAMTable
        QUEUE_URL: !Ref VehicleSAMQueue

Resources:
  listVehiclesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/api/list-vehicles.handler
      Description: List vehicles from dynamo db table lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VehicleSAMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  addVehicleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/api/add-vehicle.handler
      Description: Add vehicle to dynamo db table lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VehicleSAMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  getVehicleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/api/get-vehicle.handler
      Description: Get vehicle from dynamo db table lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VehicleSAMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET

  updateVehicleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/api/update-vehicle.handler
      Description: Update vehicle in dynamo db table lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VehicleSAMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: PUT

  deleteVehicleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/api/delete-vehicle.handler
      Description: Delete vehicle in dynamo db table lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VehicleSAMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: DELETE

  processS3BucketFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/s3/process-s3-bucket.handler
      Description: Process S3 bucket lambda. Read file from S3, parse it and store in SQS
      Policies:
        - S3ReadPolicy:
            BucketName: rgederin-aws-sam-vehicle-bucket
        - SQSSendMessagePolicy:
            QueueName: !GetAtt VehicleSAMQueue.QueueName
      Events:
        S3NewObjectEvent:
          Type: S3
          Properties:
            Bucket: !Ref VehicleSAMBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: ".json"

  processSqsMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/sqs/process-sqs-message.handler
      Description: Process SQS message lambda. Read message from SQS and store data in DynamoDB
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VehicleSAMTable
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt VehicleSAMQueue.Arn

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  VehicleSAMTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # AWS SQS queue
  VehicleSAMQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: vehicle-aws-sam-queue

  # S3 bucket where vehicle data is uploaded
  VehicleSAMBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: rgederin-aws-sam-vehicle-bucket

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
